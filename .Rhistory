plot(nofit, which = 1)
plot(fitno, which = 1)
coef(fit)-coef(fitno)
dfbeta(fit)
head(dfbeta(fit))
resno <- out2[1,"y"] -predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df(fit))
sigma <- sqrt(deviance(fit)/fit$df.residual
)
rstd<-sigma*sqrt(1- hatvalues(fit))
rstd<-resid(fit)/(sigma*sqrt(1- hatvalues(fit)))
view(cbind(rstd,rstandard(fit)))
View(cbind(rstd,rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/fitno$df.residual)
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
predict(fitno,out2) - predict(fit,out2)
dy <- predict(fitno,out2) - predict(fit,out2)
sum(dy^2)*2*sigma^2
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit,which = 5)
install.packages("manipulate")
source('~/BlackScholes.R')
source('~/BlackScholes.R')
callPrices <- price(S,K,t,r, vols)
vols <- seq(0.01,0.5,0.01)
callPrices <- price(S,K,t,r, vols)
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
?manipulate
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
?plot
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
StockPrice-K
source('~/BlackScholes.R')
max(StockPrice-K,0)
length(StockPrice)
rep(0,399)
source('~/BlackScholes.R')
max(StockPrice-K,rep(0,399))
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
price
price1
delta1
price2 = price(S+0.5,t,r,vol)
price2 = price(S+0.5,K,t,r,vol)
price2
20.25+delta1*0.5
source('~/BlackScholes.R')
price1
vega
price3
source('~/BlackScholes.R')
abline(h=price1)
abline(h=price1,col="red",lwd =5)
abline(h=price1,col="red",lwd =1)
abline(v=0.15,col="red")
abline(h=25, col="green")
abline(h=25, col="blue")
abline(h=25, col="blue", lwd =2)
manipulate(abline(v=v),v=slider(c(0.1,0.5)))
manipulate(abline(v=v),v=slider(0.1,0.5))
abline(v=0.28,col="red")
abline(v=0.275,col="red")
S=100
K=98
vol =0.2
dt = 0.5
d1 <- (log(S/K)+(r+0.5*vol^2)*dt)/(vol*sqrt(dt))
d1
d1 - vol*sqrt(dt)
d1 <- (log(S/K)+(r+0.5*vol^2)*dt)/(vol*sqrt(dt))
d2 <- d1 - vol*sqrt(dt)
S*pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
d1 <- (log(S/K)+(r+0.5*vol^2)*dt)/(vol*sqrt(dt))
d2 <- d1 - vol*sqrt(dt)
S*pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
pnorm(0.39)
pnorm(0.25)
d1
d2
S*pnorm(d1) - K*exp(-r*dt)*pnorm(d2)
theta(100,98,0.5,0.05,0.2)
theta(99,98,0.5-7/365,0.05,0.2)
pric(99,98,0.5-7/365,0.05,0.2)
price(99,98,0.5-7/365,0.05,0.2)
8-0.65-8.08*7/365
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
dt
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
calldata
library(ggplot2)
calldata <- data.frame(volatility = vols, price=prices)
myplot <- function(vol,p){
p1=
g = ggplot(calldata, aes(x=volatility, y=prices))
g = g + ylim(12,20)
g = g + xlim(0,0.5)
g = g + geom_line(col="blue")
g = g + geom_hline(yintercept = p, col="red", size=2 )
g = g + geom_vline(xintercept = vol, col=3, size=2)
g = g + geom_hline(yintercept = price(S,K,dt, r, vol), col=4, size=2)
g
}
library(manipulate)
manipulate(myplot(vol,price1), vol = slider(0.01,0.5, step=0.01,initial = 0.1))
source('~/BlackScholes.R')
source('~/BlackScholes.R')
source('~/BlackScholes.R')
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fit, which=1)
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]-predict(fitno, out2[1,])
(1- resid(fit)[1])/resno
1- resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- deviance(fit)/df(fit)
sigma <- deviance(fit)/df.residual(fit)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
rstandard(fit)
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fit))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <-predict(fino,out2)-predict(fit,out2)
dy <-predict(fitno,out2)-predict(fit,out2)
deviance(fit)/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
source('~/coursera/RegressionModels/Quiz3.R')
summary(fit1)
+4*-1.5078
mtcars$cyl
plot(mtcars$mpg,mtcars$wt, col=mtcars$cyl)
abline(fit1)
predict(fit,c(5,mtcars$wt[1]))
mtcars$wt[1]
predict(fit,c(5,2.62))
predict(fit,data.frame(cyl=5,wt=2.62))
predict(fit,data.frame(cyl=4,wt=2.62))
predict(fit,data.frame(cyl=6,wt=2.62))
predict(fit,data.frame(cyl=8,wt=2.62))
predict(fit1,data.frame(cyl=8,wt=2.62))
predict(fit1,data.frame(cyl=7,wt=2.62))
source('~/coursera/RegressionModels/Quiz3.R')
summary(fit21)
source('~/coursera/RegressionModels/Quiz3.R')
source('~/coursera/RegressionModels/Quiz3.R')
summary(fit21)
summary(fit22)
summary(fit1)
summary(fit21)
summary(fit22)
source('~/coursera/RegressionModels/Quiz3.R')
fit3
summary(fit3)
lrtest
anova(fit3,fit22)
lrtest
source('~/coursera/RegressionModels/Quiz3.R')
anova(fit22,fit3, test= "LRT")
source('~/coursera/RegressionModels/Quiz3.R')
source('~/coursera/RegressionModels/Quiz3.R')
fit4
summary(fit4)
summary(fit1)
summary(fit4)
summary(fit1)
summary(fit22)
source('~/EDP.R')
source('~/EDP.R')
S
source('~/EDP.R')
t
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
pause
stop()
source('~/EDP.R')
abline(v= S[Ns-1],col="red",lwd=4)
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
Smin = S0* exp((r-sigma*sigma*0.5)*maturity - sigma* 2.576*sqrt(maturity))
Smin
Smax
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
source('~/EDP.R')
library(tweedie)
?tweedie.profile
?optim
library(swirl)
swirl()
?norm
vignette("gemalgo")
?graphSigma
library(gemalgo)
?graphSigma
grep(names(train),pattern = "belt")
grep(pattern = "belt",x = names(train))
names(train)
knitr::opts_chunk$set(echo = TRUE)
train <- read.csv("pml-training.csv")
names(train)
grep(pattern = "belt",x = names(train))
dim(grep(pattern = "belt",x = names(train)))
length(grep(pattern = "belt",x = names(train))
)
n <- names(train)
idxbelt <- grep(pattern = "belt",x=n)
n[idxbelt]
n
df <- data.frame(n)
View(df)
train$roll_belt
train$avg_roll_belt
mean(train$avg_roll_belt)
mean(is.na(train$avg_roll_belt))
apply(train,2,mean(is.na())
)
apply(train,2, propNA)
propNA <- function(x){
p <- mean(is.na(x))
p
}
apply(train,2, propNA)
res <- apply(train,2, propNA)
res > 0.05
n[res > 0.05]
n[res < 0.05]
train <- read.csv("pml-training.csv")
n <- names(train)
propNA <- function(x){
p <- mean(is.na(x))
p
}
res <- apply(X = train, MARGIN = 2, FUN = propNA)
newTrain <- train[,res < 0.05]
dim(newTrain)
names(newTrain)
df <- data.frame(names(newTrain))
df
idx <- grep(pattern = "kurtosis", x = newTrain)
idx <- grep(pattern = "kurtosis", x = names(newTrain))
idx
idx2 <- grep(pattern = "skew", x = names(newTrain))
idx2
names(newTrain)
toRemove <- c(1:8,idx1, idx2)
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
toRemove
finalTrain <- newTrain[,-toRemove]
names(finalTrain)
grep(pattern = "avg", x=names(finalTrain)
)
grep(pattern = "avg", x=names(Train)
)
grep(pattern = "avg", x=names(train))
propNA(train[,29])
propNA(train[,28])
propNA(train[,51])
suppressMessages(library(caret))
library(randomForest)
?rfcv
train <- read.csv("pml-training.csv")
train <- read.csv("pml-training.csv")
propNA <- function(x){
p <- mean(is.na(x))
p
}
res <- apply(X = train, MARGIN = 2, FUN = propNA)
newTrain <- train[,res < 0.05]
newTrain <- train[,res < 0.05]
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[,-toRemove]
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[,-toRemove]
library(caret)
library(randomForest)
models <- rfcv(trainx = finalTrain[,-"classe"], trainy = finalTrain$classe,cv.fold = 10)
models <- rfcv(trainx = finalTrain[,-classe], trainy = finalTrain$classe,cv.fold = 10)
finalTrain
names(finalTrain)
models <- rfcv(trainx = finalTrain[,-61], trainy = finalTrain$classe,cv.fold = 10)
finalTrain[,-61]
apply(X = finalTrain[,-61], 2, class)
train <- read.csv("pml-training.csv",header = T)
getwd()
setwd("coursera/practicalML/project/")
train <- read.csv("pml-training.csv",header = T)
train
apply(X = train, 2, class)
train$roll_belt
mean(train$roll_belt)
class(train$roll_belt)
apply(X = train, 1, class)
apply(X = train, 2, class)
apply(X = train, 2, levels)
apply(X = train, 2, mean)
r<- apply(X = train, 2, mean)
r
propNA(train)
res <- apply(X = train, MARGIN = 2, FUN = propNA)
res
min(res)
max(res)
finalTrain[,-61]
View(finalTrain)
finalTrain$min_yaw_belt
newTrain <- train[,res > 0.5]
res <- apply(X = train, MARGIN = 2, FUN = propNA)
train <- read.csv("pml-training.csv")
train <- read.csv("pml-training.csv")
propNA <- function(x){
p <- mean(is.na(x))
p
}
newTrain <- train[,res > 0.5]
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[,-toRemove]
finalTrain <- complete.cases(newTrain[,-toRemove])
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove],-toRemove])
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove]),-toRemove]
dim(finalTrain)
names(train)
res[160]<-1
newTrain <- train[,res > 0.5]
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove]),-toRemove]
dim(finalTrain)
models <- rfcv(trainx = finalTrain[,-60], trainy = finalTrain$classe,cv.fold = 10)
models
models$n.var
models$predicted
models$error.cv
importance(models)
mod <- train(classe~., method="rf", data=finalTrain)
mod
importance(mod)
importance(x = mdo
importance(x = mod)
?importance
mod <- randomForest(classe~., data=finalTrain)
mof
mod
importance(x = mod)
I <- importance(x = mod)
I <- I[order()]
I
I <- I[order(I)]
I <- importance(x = mod)
I <- I[order(I)]
I
I <- I[order(I,decreasing = T)]
I
I <- importance(x = mod)
I
class(I)
rownames(I)
df <- data.frame(var = rownames(I),i = I)
df
odf <- df[order(df$I),]
order(df$I)
order(df$i)
df
order(df$MeanDecreaseGini)
df <- data.frame(var = rownames(I),imp = I)
df
I
df <- data.frame(var = rownames(I),imp = I[,1])
df
names(df)
odf <- df[order(df$imp, decreasing = T),]
odf
odf[1:15,]
odf[1:16,]
odf[1:16,]
train <- read.csv("pml-training.csv")
train <- read.csv("pml-training.csv")
propNA <- function(x){
p <- mean(is.na(x))
p
}
res <- apply(X = train, MARGIN = 2, FUN = propNA)
res[160]<-1
res[160]<-1
newTrain <- train[,res > 0.5]
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove]),-toRemove]
library(caret)
library(randomForest)
library(caret)
library(randomForest)
set.seed(123)
models <- rfcv(trainx = finalTrain[,-60], trainy = finalTrain$classe,cv.fold = 10)
models
set.seed(1234)
models <- rfcv(trainx = finalTrain[,-60], trainy = finalTrain$classe,cv.fold = 5)
models
finalTrain <- train[complete.cases(train[,-toRemove]),-toRemove]
finalTrain
names(finalTrain)
models <- rfcv(trainx = finalTrain[,-152], trainy = finalTrain$classe,cv.fold = 5)
train <- read.csv("pml-training.csv")
train <- read.csv("pml-training.csv")
propNA <- function(x){
p <- mean(is.na(x))
p
}
res <- apply(X = train, MARGIN = 2, FUN = propNA)
res[160]<-1
newTrain <- train[,res > 0.5]
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx1 <- grep(pattern = "kurtosis", x = names(newTrain))
idx2 <- grep(pattern = "skew", x = names(newTrain))
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove]),-toRemove]
toRemove <- c(1:8,idx1, idx2)
finalTrain <- newTrain[complete.cases(newTrain[,-toRemove]),-toRemove]
library(caret)
library(randomForest)
set.seed(1234)
models <- rfcv(trainx = finalTrain[,-60], trainy = finalTrain$classe,cv.fold = 5)
models
kable(models$error.cv)
library(knitr)
kable(models$error.cv)
models$error.cv
?kable
class(models$error.cv)
data.frame(numberVars = models$n.var)
class(models)
plot(models$n.var,models$error.cv)
plot(models$n.var,models$error.cv, type = "l", lwd=2)
plot(models$n.var,models$error.cv, type = "l", lwd=2, col="red")
